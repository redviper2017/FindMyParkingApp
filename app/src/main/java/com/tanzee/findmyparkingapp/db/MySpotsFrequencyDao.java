package com.tanzee.findmyparkingapp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "MY_SPOTS_FREQUENCY".
*/
public class MySpotsFrequencyDao extends AbstractDao<MySpotsFrequency, Long> {

    public static final String TABLENAME = "MY_SPOTS_FREQUENCY";

    /**
     * Properties of entity MySpotsFrequency.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
        public final static Property TimeInLong = new Property(3, Long.class, "timeInLong", false, "TIME_IN_LONG");
        public final static Property Origin = new Property(4, String.class, "origin", false, "ORIGIN");
        public final static Property Destination = new Property(5, String.class, "destination", false, "DESTINATION");
        public final static Property Frequency = new Property(6, Integer.class, "frequency", false, "FREQUENCY");
    }


    public MySpotsFrequencyDao(DaoConfig config) {
        super(config);
    }
    
    public MySpotsFrequencyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MY_SPOTS_FREQUENCY\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"DATE\" TEXT UNIQUE ," + // 2: date
                "\"TIME_IN_LONG\" INTEGER," + // 3: timeInLong
                "\"ORIGIN\" TEXT," + // 4: origin
                "\"DESTINATION\" TEXT UNIQUE ," + // 5: destination
                "\"FREQUENCY\" INTEGER);"); // 6: frequency
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MY_SPOTS_FREQUENCY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MySpotsFrequency entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        Long timeInLong = entity.getTimeInLong();
        if (timeInLong != null) {
            stmt.bindLong(4, timeInLong);
        }
 
        String origin = entity.getOrigin();
        if (origin != null) {
            stmt.bindString(5, origin);
        }
 
        String destination = entity.getDestination();
        if (destination != null) {
            stmt.bindString(6, destination);
        }
 
        Integer frequency = entity.getFrequency();
        if (frequency != null) {
            stmt.bindLong(7, frequency);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MySpotsFrequency entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        Long timeInLong = entity.getTimeInLong();
        if (timeInLong != null) {
            stmt.bindLong(4, timeInLong);
        }
 
        String origin = entity.getOrigin();
        if (origin != null) {
            stmt.bindString(5, origin);
        }
 
        String destination = entity.getDestination();
        if (destination != null) {
            stmt.bindString(6, destination);
        }
 
        Integer frequency = entity.getFrequency();
        if (frequency != null) {
            stmt.bindLong(7, frequency);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MySpotsFrequency readEntity(Cursor cursor, int offset) {
        MySpotsFrequency entity = new MySpotsFrequency( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // date
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // timeInLong
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // origin
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // destination
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // frequency
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MySpotsFrequency entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTimeInLong(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setOrigin(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDestination(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFrequency(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MySpotsFrequency entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MySpotsFrequency entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MySpotsFrequency entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
